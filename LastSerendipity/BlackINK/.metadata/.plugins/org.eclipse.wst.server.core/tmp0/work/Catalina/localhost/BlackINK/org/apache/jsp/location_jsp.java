/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.37
 * Generated at: 2020-10-01 09:37:10 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class location_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(4);
    _jspx_dependants.put("/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar", Long.valueOf(1601542274562L));
    _jspx_dependants.put("/./form/header.jsp", Long.valueOf(1601544975347L));
    _jspx_dependants.put("jar:file:/C:/Users/yhner/OneDrive/문서/ThirdSemi/BlackINK/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/BlackINK/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar!/META-INF/c.tld", Long.valueOf(1425946270000L));
    _jspx_dependants.put("/./form/footer.jsp", Long.valueOf(1601542274569L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fif_0026_005ftest;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<link href=\"./css/kakaomap.css\" rel=\"stylesheet\">\r\n");
      out.write("<script src=\"http://code.jquery.com/jquery-1.9.1.min.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<link type=\"text/css\" rel=\"stylesheet\" href=\"./css/header.css\">\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("<header>\r\n");
      out.write("\r\n");
      out.write("   <h1><a href=\"main.jsp\">Black INK</a></h1>\r\n");
      out.write("   \r\n");
      out.write("   <div id=\"naviList\">\r\n");
      out.write("      <ul id=\"mainMenu\">\r\n");
      out.write("      \r\n");
      out.write("      \r\n");
      out.write("        <li><a href=\"tattooshareController.do?command=list\">Sample</a>\r\n");
      out.write("\t        \t<ul class=\"subMenu\">\r\n");
      out.write("\t        \t\t<li><a>Search</a></li>\r\n");
      out.write("\t        \t\t<li><a>Canvas</a></li>\r\n");
      out.write("\t        \t</ul> \r\n");
      out.write("\t         </li>\r\n");
      out.write("         \r\n");
      out.write("         \r\n");
      out.write("         <li><a href=\"location.jsp\">Location</a></li>\r\n");
      out.write("         \r\n");
      out.write("         \r\n");
      out.write("         <li><a href=\"NoticeController.do?command=notice&curPage=1\">Story</a>\r\n");
      out.write("\t         \t<ul class=\"subMenu\">\r\n");
      out.write("\t         \t\t<li><a href=\"NoticeController.do?command=notice&curPage=1\">notice</a></li>\r\n");
      out.write("\t         \t\t<li><a href=\"ReviewController.do?command=review&curPage=1\">review</a></li>\r\n");
      out.write("\t         \t</ul>\r\n");
      out.write("\t         </li>\r\n");
      out.write("         \r\n");
      out.write("         \r\n");
      out.write("          <li><a href=\"QnaController.do?command=qna&curPage=1\">Q&A</a><li>\r\n");
      out.write("         \r\n");
      out.write("         \r\n");
      out.write("         <li>\r\n");
      out.write("            ");
      if (_jspx_meth_c_005fif_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("            ");
      if (_jspx_meth_c_005fif_005f1(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("            ");
      if (_jspx_meth_c_005fif_005f2(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("\t\t\t <ul class=\"subMenu\">\r\n");
      out.write("\t            \t<li>tattooist</li>\r\n");
      out.write("\t            \t<li>user</li>\r\n");
      out.write("\t            \t<li>admin</li>\r\n");
      out.write("\t             </ul>\r\n");
      out.write("         </li>\r\n");
      out.write("         \r\n");
      out.write("         \r\n");
      out.write("         <li>\r\n");
      out.write("            ");
      if (_jspx_meth_c_005fif_005f3(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("            ");
      if (_jspx_meth_c_005fif_005f4(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("         </li>\r\n");
      out.write("         \r\n");
      out.write("         \r\n");
      out.write("      </ul>\r\n");
      out.write("      \r\n");
      out.write("   </div>\r\n");
      out.write("   <hr size=\"10\" width=\"100%\" color=\"black\">\r\n");
      out.write("\r\n");
      out.write("</header>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</html>");
      out.write("\r\n");
      out.write("<div class=\"mapBody\"> \r\n");
      out.write("\t<div id=\"textSearch\">\r\n");
      out.write("\t\t\t<form onsubmit=\"\">\r\n");
      out.write("\t\t\t\t<p id=\"append\">타투샵&타투이스트로 검색하기<br>\r\n");
      out.write("\t\t\t\t\t<input type=\"text\" value=\"BlackINK\" id=\"keyword\" style=\"width:300px; height:20px;\"/>\t\t\t\t\r\n");
      out.write("\t\t\t\t\t<input type=\"submit\" value=\"검색하기\" id=\"search\" style=\"width:50px; height:20px;\"/>\r\n");
      out.write("\t\t\t\t</p>\r\n");
      out.write("\t\t\t</form>\r\n");
      out.write("\t</div>\t\t\r\n");
      out.write("\t\r\n");
      out.write("\t<div class=\"map_wrap\">\r\n");
      out.write("\t\t<div id=\"map\"\r\n");
      out.write("\t\t\tstyle=\"width: 100%; height: 100%; position: relative; overflow: hidden;\"></div>\r\n");
      out.write("\r\n");
      out.write("\t\t<div id=\"menu_wrap\" class=\"bg_white\">\r\n");
      out.write("\t\t\t<div class=\"option\">\r\n");
      out.write("\t\t\t\t<div>\r\n");
      out.write("<!-- \t\t\t\t\t<form onsubmit=\"searchPlaces(); return false;\">\r\n");
      out.write("\t\t\t\t\t\t키워드 : <input type=\"text\" value=\"타투\" id=\"keyword\" size=\"15\">\r\n");
      out.write("\t\t\t\t\t\t<button type=\"submit\">검색하기</button>\r\n");
      out.write("\t\t\t\t\t</form> -->\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<ul id=\"placesList\"></ul>\r\n");
      out.write("\t\t\t<div id=\"pagination\"></div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<div id=\"empty\"></div>\r\n");
      out.write("\t\r\n");
      out.write("\t<script type=\"text/javascript\"\r\n");
      out.write("\t\tsrc=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=c5dc0112e4e6fe63d4816715e4635e6e&libraries=services,clusterer,drawing\"></script>\r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t/* var container = document.getElementById('map');\r\n");
      out.write("\t\tvar options = {\r\n");
      out.write("\t\t\tcenter : new kakao.maps.LatLng(33.450701, 126.570667),\r\n");
      out.write("\t\t\tlevel : 9\r\n");
      out.write("\t\t};\r\n");
      out.write("\t\t//지도생성 \r\n");
      out.write("\t\tvar map = new kakao.maps.Map(container, options); */\r\n");
      out.write("\t\t//장소 검객 객체를 생성 \r\n");
      out.write("\t\tvar ps = new kakao.maps.services.Places();\r\n");
      out.write("\t\t// 검색 결과 목록이나 마커를 클릭했을 때 장소명을 표출할 인포윈도우를 생성 \r\n");
      out.write("\t\tvar infowindow = new kakao.maps.InfoWindow({\r\n");
      out.write("\t\t\tzIndex : 1\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t//키워드로 장소를 검색하는 메소드 호출 \r\n");
      out.write("\t\t//searchPlaces();\r\n");
      out.write("\r\n");
      out.write("\t\t// 마커를 담을 배열입니다\r\n");
      out.write("\t\tvar markers = [];\r\n");
      out.write("\r\n");
      out.write("\t\tvar mapContainer = document.getElementById('map'), // 지도를 표시할 div \r\n");
      out.write("\t\tmapOption = {\r\n");
      out.write("\t\t\tcenter : new kakao.maps.LatLng(37.566826, 126.9786567), // 지도의 중심좌표\r\n");
      out.write("\t\t\tlevel : 10\r\n");
      out.write("\t\t// 지도의 확대 레벨\r\n");
      out.write("\t\t};\r\n");
      out.write("\r\n");
      out.write("\t\t// 지도를 생성합니다    \r\n");
      out.write("\t\tvar map = new kakao.maps.Map(mapContainer, mapOption);\r\n");
      out.write("\r\n");
      out.write("\t\t// 장소 검색 객체를 생성합니다\r\n");
      out.write("\t\tvar ps = new kakao.maps.services.Places();\r\n");
      out.write("\r\n");
      out.write("\t\t// 검색 결과 목록이나 마커를 클릭했을 때 장소명을 표출할 인포윈도우를 생성합니다\r\n");
      out.write("\t\tvar infowindow = new kakao.maps.InfoWindow({\r\n");
      out.write("\t\t\tzIndex : 1\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar keyword = document.getElementById('keyword').value;\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tnewMapSearch(keyword);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t$(function(){\r\n");
      out.write("\t\t\t$(\"#search\").click(\r\n");
      out.write("\t\t\t\tfunction(){\r\n");
      out.write("\t\t\t\t\tevent.preventDefault();\r\n");
      out.write("\t\t\t\t\t$(\"#N\").remove();\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\tvar keyword = document.getElementById('keyword').value;\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\tif (!keyword.replace(/^\\s+|\\s+$/g, '')) {\r\n");
      out.write("\t\t\t\t\t\talert('키워드를 입력해주세요!');\r\n");
      out.write("\t\t\t\t\t\treturn false;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t// 키워드로 장소를 검색합니다\r\n");
      out.write("\t\t\t\t\tnewMapSearch(keyword);\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t});\t\r\n");
      out.write("\t\t});\t\t\t\t\r\n");
      out.write("\r\n");
      out.write("\t\t// 키워드 검색을 요청하는 함수입니다\r\n");
      out.write("\t\tfunction searchPlaces() {\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t//$(\".map_wrap\").prepend($(\"<div>\").attr(\"id\",\"map\"));\r\n");
      out.write("\t\t\tvar markers = [];\r\n");
      out.write("\r\n");
      out.write("\t\t\tvar mapContainer = document.getElementById(\"map\"), // 지도를 표시할 div \r\n");
      out.write("\t\t\t    mapOption = {\r\n");
      out.write("\t\t\t        center: new kakao.maps.LatLng(37.566826, 126.9786567), // 지도의 중심좌표\r\n");
      out.write("\t\t\t        level: 3 // 지도의 확대 레벨\r\n");
      out.write("\t\t\t    };  \r\n");
      out.write("\r\n");
      out.write("\t\t\t// 지도를 생성합니다    \r\n");
      out.write("\t\t\t//var map = new kakao.maps.Map(mapContainer, mapOption); \r\n");
      out.write("\r\n");
      out.write("\t\t\t// 장소 검색 객체를 생성합니다\r\n");
      out.write("\t\t\tvar ps = new kakao.maps.services.Places();  \r\n");
      out.write("\r\n");
      out.write("\t\t\t// 검색 결과 목록이나 마커를 클릭했을 때 장소명을 표출할 인포윈도우를 생성합니다\r\n");
      out.write("\t\t\tvar infowindow = new kakao.maps.InfoWindow({zIndex:1}); \r\n");
      out.write("\r\n");
      out.write("\t\t\tvar keyword = document.getElementById('keyword').value;\r\n");
      out.write("\r\n");
      out.write("\t\t\t// 장소검색 객체를 통해 키워드로 장소검색을 요청합니다\r\n");
      out.write("\t\t\tps.keywordSearch(keyword, placesSearchCB);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\r\n");
      out.write("\t\t// 장소검색이 완료됐을 때 호출되는 콜백함수 입니다\r\n");
      out.write("\t\tfunction placesSearchCB(data, status, pagination) {\r\n");
      out.write("\t\t    if (status === kakao.maps.services.Status.OK) {\r\n");
      out.write("\r\n");
      out.write("\t\t        // 정상적으로 검색이 완료됐으면\r\n");
      out.write("\t\t        // 검색 목록과 마커를 표출합니다\r\n");
      out.write("\t\t        displayPlaces(data);\r\n");
      out.write("\r\n");
      out.write("\t\t        // 페이지 번호를 표출합니다\r\n");
      out.write("\t\t        displayPagination(pagination);\r\n");
      out.write("\r\n");
      out.write("\t\t    } else if (status === kakao.maps.services.Status.ZERO_RESULT) {\r\n");
      out.write("\r\n");
      out.write("\t\t    \t$(\"#N\").remove();\r\n");
      out.write("\t\t\t\t$(\"#append\").append($(\"<a>\").html(\"전체 검색결과가 없습니다. \").attr('style', 'color:red;').attr('id','N'));\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t        return;\r\n");
      out.write("\r\n");
      out.write("\t\t    } else if (status === kakao.maps.services.Status.ERROR) {\r\n");
      out.write("\r\n");
      out.write("\t\t        alert('검색 결과 중 오류가 발생했습니다.');\r\n");
      out.write("\t\t        return;\r\n");
      out.write("\r\n");
      out.write("\t\t    }\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t// 검색 결과 목록과 마커를 표출하는 함수입니다\r\n");
      out.write("\t\tfunction displayPlaces(places) {\r\n");
      out.write("\r\n");
      out.write("\t\t    var listEl = document.getElementById('placesList'), \r\n");
      out.write("\t\t    menuEl = document.getElementById('menu_wrap'),\r\n");
      out.write("\t\t    fragment = document.createDocumentFragment(), \r\n");
      out.write("\t\t    bounds = new kakao.maps.LatLngBounds(), \r\n");
      out.write("\t\t    listStr = '';\r\n");
      out.write("\t\t    \r\n");
      out.write("\t\t    // 검색 결과 목록에 추가된 항목들을 제거합니다\r\n");
      out.write("\t\t    removeAllChildNods(listEl);\r\n");
      out.write("\r\n");
      out.write("\t\t    // 지도에 표시되고 있는 마커를 제거합니다\r\n");
      out.write("\t\t    removeMarker();\r\n");
      out.write("\t\t    \r\n");
      out.write("\t\t    for ( var i=0; i<places.length; i++ ) {\r\n");
      out.write("\r\n");
      out.write("\t\t        // 마커를 생성하고 지도에 표시합니다\r\n");
      out.write("\t\t        var placePosition = new kakao.maps.LatLng(places[i].y, places[i].x),\r\n");
      out.write("\t\t            marker = addMarker(placePosition, i), \r\n");
      out.write("\t\t            itemEl = getListItem(i, places[i]); // 검색 결과 항목 Element를 생성합니다\r\n");
      out.write("\r\n");
      out.write("\t\t        // 검색된 장소 위치를 기준으로 지도 범위를 재설정하기위해\r\n");
      out.write("\t\t        // LatLngBounds 객체에 좌표를 추가합니다\r\n");
      out.write("\t\t        bounds.extend(placePosition);\r\n");
      out.write("\r\n");
      out.write("\t\t        // 마커와 검색결과 항목에 mouseover 했을때\r\n");
      out.write("\t\t        // 해당 장소에 인포윈도우에 장소명을 표시합니다\r\n");
      out.write("\t\t        // mouseout 했을 때는 인포윈도우를 닫습니다\r\n");
      out.write("\t\t        (function(marker, title) {\r\n");
      out.write("\t\t            kakao.maps.event.addListener(marker, 'mouseover', function() {\r\n");
      out.write("\t\t                displayInfowindow(marker, title);\r\n");
      out.write("\t\t            });\r\n");
      out.write("\r\n");
      out.write("\t\t            kakao.maps.event.addListener(marker, 'mouseout', function() {\r\n");
      out.write("\t\t                infowindow.close();\r\n");
      out.write("\t\t            });\r\n");
      out.write("\r\n");
      out.write("\t\t            itemEl.onmouseover =  function () {\r\n");
      out.write("\t\t                displayInfowindow(marker, title);\r\n");
      out.write("\t\t            };\r\n");
      out.write("\r\n");
      out.write("\t\t            itemEl.onmouseout =  function () {\r\n");
      out.write("\t\t                infowindow.close();\r\n");
      out.write("\t\t            };\r\n");
      out.write("\t\t        })(marker, places[i].place_name);\r\n");
      out.write("\r\n");
      out.write("\t\t        fragment.appendChild(itemEl);\r\n");
      out.write("\t\t    }\r\n");
      out.write("\r\n");
      out.write("\t\t    // 검색결과 항목들을 검색결과 목록 Elemnet에 추가합니다\r\n");
      out.write("\t\t    listEl.appendChild(fragment);\r\n");
      out.write("\t\t    menuEl.scrollTop = 0;\r\n");
      out.write("\r\n");
      out.write("\t\t    // 검색된 장소 위치를 기준으로 지도 범위를 재설정합니다\r\n");
      out.write("\t\t    map.setBounds(bounds);\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t// 검색결과 항목을 Element로 반환하는 함수입니다\r\n");
      out.write("\t\tfunction getListItem(index, places) {\r\n");
      out.write("\r\n");
      out.write("\t\t    var el = document.createElement('li'),\r\n");
      out.write("\t\t    itemStr = '<span class=\"markerbg marker_' + (index+1) + '\"></span>' +\r\n");
      out.write("\t\t                '<div class=\"info\">' +\r\n");
      out.write("\t\t                '   <h5>' + places.place_name + '</h5>';\r\n");
      out.write("\r\n");
      out.write("\t\t    if (places.road_address_name) {\r\n");
      out.write("\t\t        itemStr += '    <span>' + places.road_address_name + '</span>' +\r\n");
      out.write("\t\t                    '   <span class=\"jibun gray\">' +  places.address_name  + '</span>';\r\n");
      out.write("\t\t    } else {\r\n");
      out.write("\t\t        itemStr += '    <span>' +  places.address_name  + '</span>'; \r\n");
      out.write("\t\t    }\r\n");
      out.write("\t\t                 \r\n");
      out.write("\t\t      itemStr += '  <span class=\"tel\">' + places.phone  + '</span>' +\r\n");
      out.write("\t\t                '</div>';           \r\n");
      out.write("\r\n");
      out.write("\t\t    el.innerHTML = itemStr;\r\n");
      out.write("\t\t    el.className = 'item';\r\n");
      out.write("\r\n");
      out.write("\t\t    return el;\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t// 마커를 생성하고 지도 위에 마커를 표시하는 함수입니다\r\n");
      out.write("\t\tfunction addMarker(position, idx, title) {\r\n");
      out.write("\t\t    var imageSrc = 'https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png', // 마커 이미지 url, 스프라이트 이미지를 씁니다\r\n");
      out.write("\t\t        imageSize = new kakao.maps.Size(36, 37),  // 마커 이미지의 크기\r\n");
      out.write("\t\t        imgOptions =  {\r\n");
      out.write("\t\t            spriteSize : new kakao.maps.Size(36, 691), // 스프라이트 이미지의 크기\r\n");
      out.write("\t\t            spriteOrigin : new kakao.maps.Point(0, (idx*46)+10), // 스프라이트 이미지 중 사용할 영역의 좌상단 좌표\r\n");
      out.write("\t\t            offset: new kakao.maps.Point(13, 37) // 마커 좌표에 일치시킬 이미지 내에서의 좌표\r\n");
      out.write("\t\t        },\r\n");
      out.write("\t\t        markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize, imgOptions),\r\n");
      out.write("\t\t            marker = new kakao.maps.Marker({\r\n");
      out.write("\t\t            position: position, // 마커의 위치\r\n");
      out.write("\t\t            image: markerImage \r\n");
      out.write("\t\t        });\r\n");
      out.write("\r\n");
      out.write("\t\t    marker.setMap(map); // 지도 위에 마커를 표출합니다\r\n");
      out.write("\t\t    markers.push(marker);  // 배열에 생성된 마커를 추가합니다\r\n");
      out.write("\r\n");
      out.write("\t\t    return marker;\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t// 지도 위에 표시되고 있는 마커를 모두 제거합니다\r\n");
      out.write("\t\tfunction removeMarker() {\r\n");
      out.write("\t\t    for ( var i = 0; i < markers.length; i++ ) {\r\n");
      out.write("\t\t        markers[i].setMap(null);\r\n");
      out.write("\t\t    }   \r\n");
      out.write("\t\t    markers = [];\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t// 검색결과 목록 하단에 페이지번호를 표시는 함수입니다\r\n");
      out.write("\t\tfunction displayPagination(pagination) {\r\n");
      out.write("\t\t    var paginationEl = document.getElementById('pagination'),\r\n");
      out.write("\t\t        fragment = document.createDocumentFragment(),\r\n");
      out.write("\t\t        i; \r\n");
      out.write("\r\n");
      out.write("\t\t    // 기존에 추가된 페이지번호를 삭제합니다\r\n");
      out.write("\t\t    while (paginationEl.hasChildNodes()) {\r\n");
      out.write("\t\t        paginationEl.removeChild (paginationEl.lastChild);\r\n");
      out.write("\t\t    }\r\n");
      out.write("\r\n");
      out.write("\t\t    for (i=1; i<=pagination.last; i++) {\r\n");
      out.write("\t\t        var el = document.createElement('a');\r\n");
      out.write("\t\t        el.href = \"#\";\r\n");
      out.write("\t\t        el.innerHTML = i;\r\n");
      out.write("\r\n");
      out.write("\t\t        if (i===pagination.current) {\r\n");
      out.write("\t\t            el.className = 'on';\r\n");
      out.write("\t\t        } else {\r\n");
      out.write("\t\t            el.onclick = (function(i) {\r\n");
      out.write("\t\t                return function() {\r\n");
      out.write("\t\t                    pagination.gotoPage(i);\r\n");
      out.write("\t\t                }\r\n");
      out.write("\t\t            })(i);\r\n");
      out.write("\t\t        }\r\n");
      out.write("\r\n");
      out.write("\t\t        fragment.appendChild(el);\r\n");
      out.write("\t\t    }\r\n");
      out.write("\t\t    paginationEl.appendChild(fragment);\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t// 검색결과 목록 또는 마커를 클릭했을 때 호출되는 함수입니다\r\n");
      out.write("\t\t// 인포윈도우에 장소명을 표시합니다\r\n");
      out.write("\t\tfunction displayInfowindow(marker, title) {\r\n");
      out.write("\t\t    var content = '<div style=\"padding:5px;z-index:1;\">' + title + '</div>';\r\n");
      out.write("\r\n");
      out.write("\t\t    infowindow.setContent(content);\r\n");
      out.write("\t\t    infowindow.open(map, marker);\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t // 검색결과 목록의 자식 Element를 제거하는 함수입니다\r\n");
      out.write("\t\tfunction removeAllChildNods(el) {   \r\n");
      out.write("\t\t    while (el.hasChildNodes()) {\r\n");
      out.write("\t\t        el.removeChild (el.lastChild);\r\n");
      out.write("\t\t    }\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tfunction newMapSearch(keyword){\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t//var keyword = $(\"#keyword\").val();\r\n");
      out.write("\t\t\tvar getAdr = \"\";\r\n");
      out.write("\t\t\t//alert(keyword);\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t//$(\"#map\").hide();\r\n");
      out.write("\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\ttype : \"GET\",\r\n");
      out.write("\t\t\t\turl : \"location.do?keyword=\"+keyword,\r\n");
      out.write("\t\t\t\tdataType : \"text\",\r\n");
      out.write("\t\t\t\tsuccess : function(response){\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\tvar  obj = JSON.parse(response);\r\n");
      out.write("\t\t\t\t\tvar list = obj.result;\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\tvar markers = [];\r\n");
      out.write("\t\t\t\t\t//$(\".map_wrap\").prepend($(\"<div>\").attr('style', 'width: 100%; height: 100%; position: relative; overflow: hidden;').attr('id','map2'));\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t// 주소-좌표 변환 객체를 생성합니다\r\n");
      out.write("\t\t\t\t\tvar geocoder = new kakao.maps.services.Geocoder(); \r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\tif(list!=null && list!=\"\") {\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\tfor(var i=0; i<list.length; i++){\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\tgeocoder.addressSearch(list[i].pr_adr_main, function(result, status) {\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t    // 정상적으로 검색이 완료됐으면 \r\n");
      out.write("\t\t\t\t\t     if (status === kakao.maps.services.Status.OK) {\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t        var coords = new kakao.maps.LatLng(result[0].y, result[0].x);\r\n");
      out.write("\t\t\t\t\t        var imageSrc = \"https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/markerStar.png\"; \r\n");
      out.write("\t\t\t\t\t        var imageSize = new kakao.maps.Size(24, 35); \r\n");
      out.write("\t\t\t\t\t        var markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize); \r\n");
      out.write("\t\t\t\t\t        \r\n");
      out.write("\t\t\t\t\t        \r\n");
      out.write("\t\t\t\t\t        // 결과값으로 받은 위치를 마커로 표시합니다\r\n");
      out.write("\t\t\t\t\t       var  marker = new kakao.maps.Marker({\r\n");
      out.write("\t\t\t\t\t            map: map,\r\n");
      out.write("\t\t\t\t\t            position: coords,\r\n");
      out.write("\t\t\t\t\t            image : markerImage\r\n");
      out.write("\t\t\t\t\t        });\r\n");
      out.write("\t\t\t\t\t        \r\n");
      out.write("\t\t\t\t\t        //marker.setMap(map);\r\n");
      out.write("\t\t\t\t\t        markers.push(marker);\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t        // 인포윈도우로 장소에 대한 설명을 표시합니다\r\n");
      out.write("\t\t\t\t\t        var infowindow = new kakao.maps.InfoWindow({\r\n");
      out.write("\t\t\t\t\t            content: '<div style=\"width:150px;text-align:center;padding:6px 0;\" id=\"search\">'+keyword+'</div>'\r\n");
      out.write("\t\t\t\t\t        });\r\n");
      out.write("\t\t\t\t\t        infowindow.open(map, marker);\r\n");
      out.write("\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t        // 지도의 중심을 결과값으로 받은 위치로 이동시킵니다\r\n");
      out.write("\t\t\t\t\t        map.setCenter(coords);\r\n");
      out.write("\t\t\t\t\t        \r\n");
      out.write("\t\t\t\t\t        \r\n");
      out.write("\t\t\t\t\t        //addMarker(list);\r\n");
      out.write("\t\t\t\t\t        \r\n");
      out.write("\t\t\t\t\t        displayReplaces(list);\r\n");
      out.write("\t\t\t\t\t        displayPagination(pagination);\r\n");
      out.write("\t\t\t\t\t        \r\n");
      out.write("\t\t\t\t\t     // 검색 결과 목록과 마커를 표출하는 함수입니다\r\n");
      out.write("\t\t\t\t\t\t\tfunction displayReplaces(places) {\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\tvar listEl = document.getElementById('placesList'), menuEl = document\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t.getElementById('menu_wrap'), fragment = document\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t.createDocumentFragment(), bounds = new kakao.maps.LatLngBounds(), listStr = '';\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t// 검색 결과 목록에 추가된 항목들을 제거합니다\r\n");
      out.write("\t\t\t\t\t\t\t\tremoveAllChildNods(listEl);\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t// 지도에 표시되고 있는 마커를 제거합니다\r\n");
      out.write("\t\t\t\t\t\t\t\t//marker.setMap(null);\r\n");
      out.write("\t\t\t\t\t\t\t\t//removeMarker(marker);\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\tfor (var i = 0; i < places.length; i++) {\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t// 마커를 생성하고 지도에 표시합니다\r\n");
      out.write("\t\t\t\t\t\t\t\t\tvar placePosition = new kakao.maps.LatLng(places[i].y,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tplaces[i].x), marker = addMarker(placePosition, i), itemEl = getListItem(\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\ti, places[i]); // 검색 결과 항목 Element를 생성합니다\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t// 검색된 장소 위치를 기준으로 지도 범위를 재설정하기위해\r\n");
      out.write("\t\t\t\t\t\t\t\t\t// LatLngBounds 객체에 좌표를 추가합니다\r\n");
      out.write("\t\t\t\t\t\t\t\t\tbounds.extend(placePosition);\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t// 마커와 검색결과 항목에 mouseover 했을때\r\n");
      out.write("\t\t\t\t\t\t\t\t\t// 해당 장소에 인포윈도우에 장소명을 표시합니다\r\n");
      out.write("\t\t\t\t\t\t\t\t\t// mouseout 했을 때는 인포윈도우를 닫습니다\r\n");
      out.write("\t\t\t\t\t\t\t\t\t(function(marker, title) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t/* kakao.maps.event.addListener(marker, 'mouseover',\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tfunction() {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\tdisplayInfowindow(marker, title);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t}); */\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tkakao.maps.event.addListener(marker, 'mouseout',\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tfunction() {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\tinfowindow.close();\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\titemEl.onmouseover = function() {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tdisplayInfowindow(marker, title);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t};\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\titemEl.onmouseout = function() {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tinfowindow.close();\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t};\r\n");
      out.write("\t\t\t\t\t\t\t\t\t})(marker, places[i].place_name);\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\tfragment.appendChild(itemEl);\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t// 검색결과 항목들을 검색결과 목록 Elemnet에 추가합니다\r\n");
      out.write("\t\t\t\t\t\t\t\tlistEl.appendChild(fragment);\r\n");
      out.write("\t\t\t\t\t\t\t\t//menuEl.scrollTop = 0;\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t// 검색된 장소 위치를 기준으로 지도 범위를 재설정합니다\r\n");
      out.write("\t\t\t\t\t\t\t\t//map.setBounds(bounds);\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t        \r\n");
      out.write("\t\t\t\t\t        \r\n");
      out.write("\t\t\t\t\t\t\t// 검색결과 항목을 Element로 반환하는 함수입니다\r\n");
      out.write("\t\t\t\t\t\t\tfunction getListItem(index, places) {\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\tvar el = document.createElement('li'), itemStr = '<span class=\"markerbg marker_'\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t+ (index + 1)\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t+ '\"></span>'\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t+ '<div class=\"info\">'\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t+ '   <h5><a href=\"profileController.do?command=detail&me_no='+ places.me_no+'\">' + places.pr_shopname + '</a></h5>';\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\titemStr += '    <span>' + places.me_nic + '</span>'\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t+ '   <span class=\"gray\">' + places.pr_adr_main\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t+ '</span>';\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\tel.innerHTML = itemStr;\r\n");
      out.write("\t\t\t\t\t\t\t\tel.className = 'item';\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\treturn el;\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t// 지도 위에 표시되고 있는 마커를 모두 제거합니다\r\n");
      out.write("\t\t\t\t\t\t\tfunction removeMarker() {\r\n");
      out.write("\t\t\t\t\t\t\t\t//marker.setMap(null);\r\n");
      out.write("\t\t\t\t\t\t\t    for ( var i = 0; i < markers.length; i++ ) {\r\n");
      out.write("\t\t\t\t\t\t\t        markers[i].setMap(null);\r\n");
      out.write("\t\t\t\t\t\t\t    }   \r\n");
      out.write("\t\t\t\t\t\t\t    markers = [];\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\t // 검색결과 목록의 자식 Element를 제거하는 함수입니다\r\n");
      out.write("\t\t\t\t\t\t\tfunction removeAllChildNods(el) {   \r\n");
      out.write("\t\t\t\t\t\t\t    while (el.hasChildNodes()) {\r\n");
      out.write("\t\t\t\t\t\t\t        el.removeChild (el.lastChild);\r\n");
      out.write("\t\t\t\t\t\t\t    }\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t \r\n");
      out.write("\t\t\t\t\t\t\t// 검색결과 목록 하단에 페이지번호를 표시는 함수입니다\r\n");
      out.write("\t\t\t\t\t\t\tfunction displayPagination(pagination) {\r\n");
      out.write("\t\t\t\t\t\t\t    var paginationEl = document.getElementById('pagination'),\r\n");
      out.write("\t\t\t\t\t\t\t        fragment = document.createDocumentFragment(),\r\n");
      out.write("\t\t\t\t\t\t\t        i; \r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t    // 기존에 추가된 페이지번호를 삭제합니다\r\n");
      out.write("\t\t\t\t\t\t\t    while (paginationEl.hasChildNodes()) {\r\n");
      out.write("\t\t\t\t\t\t\t        paginationEl.removeChild (paginationEl.lastChild);\r\n");
      out.write("\t\t\t\t\t\t\t    }\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t    for (i=1; i<=pagination.last; i++) {\r\n");
      out.write("\t\t\t\t\t\t\t        var el = document.createElement('a');\r\n");
      out.write("\t\t\t\t\t\t\t        el.href = \"#\";\r\n");
      out.write("\t\t\t\t\t\t\t        el.innerHTML = i;\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t        if (i===pagination.current) {\r\n");
      out.write("\t\t\t\t\t\t\t            el.className = 'on';\r\n");
      out.write("\t\t\t\t\t\t\t        } else {\r\n");
      out.write("\t\t\t\t\t\t\t            el.onclick = (function(i) {\r\n");
      out.write("\t\t\t\t\t\t\t                return function() {\r\n");
      out.write("\t\t\t\t\t\t\t                    pagination.gotoPage(i);\r\n");
      out.write("\t\t\t\t\t\t\t                }\r\n");
      out.write("\t\t\t\t\t\t\t            })(i);\r\n");
      out.write("\t\t\t\t\t\t\t        }\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t        fragment.appendChild(el);\r\n");
      out.write("\t\t\t\t\t\t\t    }\r\n");
      out.write("\t\t\t\t\t\t\t    paginationEl.appendChild(fragment);\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t    \r\n");
      out.write("\t\t\t\t\t\t} \r\n");
      out.write("\t\t\t\t\t    \r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t//$(\"#map\").remove();\r\n");
      out.write("\t\t\t\t\t\tsearchPlaces() \r\n");
      out.write("\t\t\t\t\t\t\t$(\"#N\").remove();\r\n");
      out.write("\t\t\t\t\t\t\t$(\"#append\").append($(\"<a>\").html(\"등록된 타투이스트가 없습니다.\").attr('style', 'color:red;').attr('id','N'));\r\n");
      out.write("\t\t\t\t\t\t\t//alert(\"결과없음\");\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}, error : function(except){\r\n");
      out.write("\t\t\t\t\t\t\t\t//alert(except.responseText);\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\r\n");
      out.write("\t</script>\r\n");
      out.write("\r\n");
      out.write("\t");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<footer>\r\n");
      out.write("\t<address>Serendipity&nbsp;&copy; All Right Reserved</address>\r\n");
      out.write("</footer>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fif_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:if
    org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f0 = (org.apache.taglibs.standard.tag.rt.core.IfTag) _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.IfTag.class);
    boolean _jspx_th_c_005fif_005f0_reused = false;
    try {
      _jspx_th_c_005fif_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fif_005f0.setParent(null);
      // /./form/header.jsp(46,12) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fif_005f0.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${empty sessionScope.me_no}", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fif_005f0 = _jspx_th_c_005fif_005f0.doStartTag();
      if (_jspx_eval_c_005fif_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("               <a href=\"login.do\">MyPage</a>\r\n");
          out.write("            ");
          int evalDoAfterBody = _jspx_th_c_005fif_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fif_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f0);
      _jspx_th_c_005fif_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fif_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fif_005f1(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:if
    org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f1 = (org.apache.taglibs.standard.tag.rt.core.IfTag) _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.IfTag.class);
    boolean _jspx_th_c_005fif_005f1_reused = false;
    try {
      _jspx_th_c_005fif_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005fif_005f1.setParent(null);
      // /./form/header.jsp(49,12) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fif_005f1.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${not empty sessionScope.me_no}", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fif_005f1 = _jspx_th_c_005fif_005f1.doStartTag();
      if (_jspx_eval_c_005fif_005f1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("               <a href=\"mypage.do?command=mypage&me_no=");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${sessionScope.me_no}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write('"');
          out.write('>');
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${sessionScope.me_name}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("</a>\r\n");
          out.write("            ");
          int evalDoAfterBody = _jspx_th_c_005fif_005f1.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fif_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f1);
      _jspx_th_c_005fif_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f1, _jsp_getInstanceManager(), _jspx_th_c_005fif_005f1_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fif_005f2(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:if
    org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f2 = (org.apache.taglibs.standard.tag.rt.core.IfTag) _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.IfTag.class);
    boolean _jspx_th_c_005fif_005f2_reused = false;
    try {
      _jspx_th_c_005fif_005f2.setPageContext(_jspx_page_context);
      _jspx_th_c_005fif_005f2.setParent(null);
      // /./form/header.jsp(52,12) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fif_005f2.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${not empty sessionScope.me_no}", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fif_005f2 = _jspx_th_c_005fif_005f2.doStartTag();
      if (_jspx_eval_c_005fif_005f2 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("\t\t\t\t\t<a href=\"mypage.do?command=mypage&me_no=");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${sessionScope.me_no}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write('"');
          out.write('>');
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${sessionScope.me_nic}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("</a>\r\n");
          out.write("\t\t\t");
          int evalDoAfterBody = _jspx_th_c_005fif_005f2.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fif_005f2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f2);
      _jspx_th_c_005fif_005f2_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f2, _jsp_getInstanceManager(), _jspx_th_c_005fif_005f2_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fif_005f3(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:if
    org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f3 = (org.apache.taglibs.standard.tag.rt.core.IfTag) _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.IfTag.class);
    boolean _jspx_th_c_005fif_005f3_reused = false;
    try {
      _jspx_th_c_005fif_005f3.setPageContext(_jspx_page_context);
      _jspx_th_c_005fif_005f3.setParent(null);
      // /./form/header.jsp(64,12) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fif_005f3.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${empty sessionScope.me_no}", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fif_005f3 = _jspx_th_c_005fif_005f3.doStartTag();
      if (_jspx_eval_c_005fif_005f3 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("               <a href=\"login.do\">LOGIN</a>\r\n");
          out.write("            ");
          int evalDoAfterBody = _jspx_th_c_005fif_005f3.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fif_005f3.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f3);
      _jspx_th_c_005fif_005f3_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f3, _jsp_getInstanceManager(), _jspx_th_c_005fif_005f3_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fif_005f4(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:if
    org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f4 = (org.apache.taglibs.standard.tag.rt.core.IfTag) _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.IfTag.class);
    boolean _jspx_th_c_005fif_005f4_reused = false;
    try {
      _jspx_th_c_005fif_005f4.setPageContext(_jspx_page_context);
      _jspx_th_c_005fif_005f4.setParent(null);
      // /./form/header.jsp(67,12) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fif_005f4.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${not empty sessionScope.me_no}", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fif_005f4 = _jspx_th_c_005fif_005f4.doStartTag();
      if (_jspx_eval_c_005fif_005f4 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("               <a href=\"logout.do\">LOGOUT</a>\r\n");
          out.write("            ");
          int evalDoAfterBody = _jspx_th_c_005fif_005f4.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fif_005f4.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f4);
      _jspx_th_c_005fif_005f4_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f4, _jsp_getInstanceManager(), _jspx_th_c_005fif_005f4_reused);
    }
    return false;
  }
}
